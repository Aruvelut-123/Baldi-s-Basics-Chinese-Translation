name: 构建测试版

on:
  workflow_dispatch:
    inputs:
      create_pre_release:
        description: '创建预发行版'
        required: true
        default: false
        type: boolean
  push:
    branches:
      - beta
    
jobs:
  create:
    strategy:
      matrix:
        branch: ["master", "master2"]
    name: 创建预发行版
    runs-on: ubuntu-24.04
    container: debian:sid
    outputs:
      upload_url: ${{ steps.create_pre_release.outputs.upload_url }}
      passwd: ${{ steps.sets.outputs.passwd }}
    steps:
    - name: 获取最新版
      uses: actions/checkout@v4
    - name: 安装 makepasswd 和 git
      run: |
        apt-get -y update
        apt-get -y install makepasswd git
    - name: 获取汉化文件
      run: |
        git clone --branch ${{ matrix.branch }} https://gitee.com/mc21441/baldi-chinese-translation-sheet.git BB-ChineseFile
        cp -f -R -v BB-ChineseFile/* ./
    - name: 设置版本、日志
      id: sets
      run: |
        ver=$(cat ver.txt)
        password=$(makepasswd --chars=16)
        echo "passwd=$password" >> $GITHUB_OUTPUT
        sed -i 's/{PASSWORD}/'"$password"'/g' updates.txt
        log=$(cat updates.txt)
        tag=$(cat ver.txt | tr [:upper:] [:lower:] | tr ' ' '_')
        echo "ver=$ver" >> "$GITHUB_OUTPUT"
        echo "log=$log" >> "$GITHUB_OUTPUT"
        echo "tag=$tag" >> "$GITHUB_OUTPUT"
    - name: 创建预发布版
      if: ${{inputs.create_pre_release == 'true' || inputs.create_pre_release == true}}
      id: create_pre_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.sets.outputs.tag }}
        release_name: ${{ steps.sets.outputs.ver }}
        body: ${{ steps.sets.outputs.log }}
        draft: false
        prerelease: true
    - name: 输出密码
      if: steps.create_pre_release.conclusion == 'skipped'
      run: echo "::notice line={line},endLine={endLine},title=安装程序密码::安装程序密码为：${{steps.sets.outputs.passwd}}"
    - name: 保存上传链接
      if: ${{inputs.create_pre_release == 'true' || inputs.create_pre_release == true}}
      run: echo "UPLOAD_URL=${{steps.create_pre_release.outputs.upload_url}}" >> $GITHUB_OUTPUT
    - name: 调试输出
      run: echo "UPLOAD_URL=${{ steps.create_pre_release.outputs.upload_url }}, PASSWORD=${{ steps.sets.outputs.passwd }}"
  build:
    needs: create
    strategy:
      matrix:
        arch: [86, 64]
        branch: ["master", "master2"]
    name: 构建并上传
    runs-on: ubuntu-24.04
    container: debian:sid
    steps:
    - name: 调试输出
      run: echo "UPLOAD_URL=${{ needs.create.outputs.UPLOAD_URL }}, PASSWORD=${{ needs.create.outputs.passwd }}"
    - name: 获取最新版
      uses: actions/checkout@v4
    - name: 安装 7-zip 和 git
      run: |
        apt-get -y update
        apt-get -y install p7zip-full git
    - name: 获取汉化文件
      run: |
        git clone --branch ${{ matrix.branch }} https://gitee.com/mc21441/baldi-chinese-translation-sheet.git BB-ChineseFile
        cp -f -R -v BB-ChineseFile/* ./
    - name: 打包汉化文件
      run: |
        ver=$(cat ver.txt)
        sed -i 's/Dev_Build/'"$ver"'/g' AutoTranslator/BepInEx/Translation/zh/Text/_AutoGeneratedTranslations.txt
        7z a BBP.7z BBP/.
        7z a AutoTranslator.7z AutoTranslator/.
        7z a BepInEx.7z BepInEx${{matrix.arch}}/.
        7z a BBDevAPI.7z BBDevAPI/.
    - name: 安装 NSIS
      run: |
        bash -c 'echo "deb http://ftp.debian.org/debian unstable main contrib non-free" >> /etc/apt/sources.list.d/unstable.list'
        apt-get -y update
        apt-get -y install -t unstable nsis
    - name: 安装插件并设置密码
      id: passwd
      env:
        PASSWORD: ${{ needs.create.outputs.passwd }}
      run: |
        cp PassDialog.dll /usr/share/nsis/Plugins/x86-unicode
        sed -i 's/{APASSWORDHERE}/'"${{env.PASSWORD}}"'/g' installer${{matrix.arch}}.nsi
        ver=$(cat ver.txt)
        sed -i 's/ver_replace_001/'"$ver"'/g' installer${{matrix.arch}}.nsi
        sed -i 's/ver_replace_001/'"$ver"'/g' readme.txt
    - name: 构建安装程序
      run: makensis installer${{matrix.arch}}.nsi
    - name: 设置版本、日志并重命名安装程序
      id: sets
      run: |
        ver=$(cat ver.txt)
        gamever=$(cat bbpver.txt)
        echo "ver=$ver" >> "$GITHUB_OUTPUT"
        echo "gamever=$gamever" >> "$GITHUB_OUTPUT"
        mv installer.exe "BB+ $gamever v$ver x${{matrix.arch}} ${{matrix.branch}}.exe"
        echo "file_name=BB+ $gamever v$ver x${{matrix.arch}} ${{matrix.branch}}.exe" >> "$GITHUB_OUTPUT"
        ls
    - name: 上传文件
      if: ${{inputs.create_pre_release == 'true' || inputs.create_pre_release == true}}
      id: upload_asset
      uses: actions/upload-release-asset@v1
      env:
        UPLOAD_URL: ${{ needs.create.outputs.upload_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./${{ steps.sets.outputs.file_name }}
        asset_name: ${{ steps.sets.outputs.file_name }}
        asset_content_type: application/zip
    - name: 上传构建
      if: ${{inputs.create_pre_release == 'false' || inputs.create_pre_release == false}} || steps.upload_asset.conclusion == 'skipped'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.sets.outputs.file_name }}
        path: ./${{ steps.sets.outputs.file_name }}